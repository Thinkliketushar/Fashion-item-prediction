# -*- coding: utf-8 -*-
"""Fashion item prediciton.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_G-qLseErfpy34jVUGUnFtnIlJg4jzHZ
"""

import keras    #----------- For dataset -------------#
import tensorflow as tf #------------- To apply model--------------#
from tensorflow import keras #----------------- For satisfaction to import keras--------------------#
from keras.datasets import fashion_mnist  #------------------Import dataset-------------#
import numpy as np #--------------For preprocessing----------#
from tensorflow.keras.optimizers import RMSprop #------------For Optimiser--------------#
from keras.models import Sequential  #-------------Initialise neural network-------------#
from keras.layers import Conv2D  #-------------Convolution Step-------------#
from keras.layers import MaxPooling2D #------------Max pooling step-----------------#
from keras.layers import Flatten #------------Flatten step------------------#
from keras.layers import Dense #-------------To make layers---------------#
import matplotlib.pyplot as plt #------------TO See Image--------------#
from google.colab import files #--------------Upload image for testing----------#
from keras.preprocessing import image #--------------Preprocessign the image---------#
from google.colab import drive #-----------Connect to google drive to save image----------#
import os #-------To change directory in google drive--------#
from keras.utils import np_utils #------Convert label dataset to one hot encode vector-------------#
from keras.layers import Dropout #-----To detect features---------_#
from keras.layers import BatchNormalization #------For normalisation the dataset---------#
from keras import backend as K #----It perfoem the operation to backend-----------#
from google.colab import auth #-------to connect the google drive--------#
from oauth2client.client import GoogleCredentials #-------To connect the google drive----------_#
import getpass
from keras.models import load_model
from keras.preprocessing.image import load_img
from keras.preprocessing.image import img_to_array
#May be some libraries we can not use but these library are used for all CNN project.

# T-shirt/top
# Trouser/pants
# Pullover shirt
# Dress
# Coat
# Sandal
# Shirt
# Sneaker
# Bag
# Ankle boot

#divide dataset into training and testing
(x_train, y_train), (x_test, y_test) = fashion_mnist.load_data()

# Explore the dataset
print ("Number of samples in X training data: " + str(len(x_train)))
print ("Number of samples in Y training data: " + str(len(y_train)))
print ("Dimensions of a single image in x_train:" + str(x_train[0].shape))
print("-------------------------------------------------------------")
print ("Number of samples in X test data: " + str(len(x_test)))
print ("Number of samples in Y test data: " + str(len(y_test)))
print ("Dimensions of single image in x_test:" + str(x_test[0].shape))

#nrows, ncols and index
plt.subplot(231)
random_num = np.random.randint(0,len(x_train))
plt.imshow(x_train[random_num], cmap=plt.get_cmap('gray')) #cmap is set the gray_image

plt.imshow(x_train[0], cmap=plt.get_cmap('gray'))

plt.imshow(x_train[0])

for i in range(9):
  plt.subplot(330 + 1+i)
  plt.imshow(x_train[i], cmap = plt.get_cmap('gray'))
  plt.show()

#-----Storeing the number of rows and columns------#
img_rows = x_train[0].shape[0]
img_cols = x_train[1].shape[0]
img_rows

x_train.shape

x_train.shape[0]

x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)
x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)
#grayscale channel 1 and colar iamge is 3
#reshape change the array without changing the data

# Storing the shape of a single image 
input_shape = (img_rows, img_cols, 1)

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')

#normalisation of the dataset
#hot encding
num_classes = 10
print('Before:',y_test[0])
y_train = keras.utils.to_categorical(y_train, num_classes) 
y_test = keras.utils.to_categorical(y_test, num_classes)
print('After:',y_test[0])
x_train = x_train/255.0
x_test = x_test/255.0

# Calculate the number of classes and number of pixels 
num_classes = y_test.shape[1]
num_pixels = x_train.shape[1] * x_train.shape[2]

num_classes

y_test.shape

num_pixels #28*28

model = Sequential()

model.add(Conv2D(32, kernel_size=(3, 3),
                 activation='relu',
                 input_shape=input_shape))
model.add(BatchNormalization())

model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(BatchNormalization())

model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25)) #----for over fitting.

model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(BatchNormalization())

model.add(Dropout(0.5))
model.add(Dense(num_classes, activation='softmax')) #softmax is convert 0 to 1

model.compile(loss = 'categorical_crossentropy',
              optimizer = keras.optimizers.Adadelta(),
              metrics = ['accuracy'])

print(model.summary())

batch_size = 128
epochs = 100
model_fitting = model.fit(x_train, y_train,
          batch_size=batch_size,
          epochs=epochs,
          verbose=1,
          validation_data=(x_test, y_test))

score = model.evaluate(x_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])

score = model.evaluate(x_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])

prediction = model.predict(x_test)
print(np.argmax(np.round(prediction[1])))

plt.imshow(x_test[1].reshape(28,28), cmap=plt.get_cmap('gray'))
plt.show()

# Function to load and prepare the image in right shape
def load_image(filename):
	# Load the image
	img = load_img(filename, color_mode = "grayscale", target_size=(28, 28))
	# Convert the image to array
	img = img_to_array(img)
	# Reshape the image into a sample of 1 channel
	img = img.reshape(1, 28, 28, 1)
	# Prepare it as pixel data
	img = img.astype('float32')
	img = img / 255.0
	return img

# Load an image and predict the apparel class
img = load_image('sandal.jpg')
# Predict the apparel class
class_prediction = model.predict_classes(img)
print(class_prediction[0])

#Map apparel category with the numerical class
if class_prediction[0] == 0:
  product = "T-shirt/top"
elif class_prediction[0] == 1:
  product = "Trouser"
elif class_prediction[0] == 2:
  product = "Pullover"
elif class_prediction[0] == 3:
  product = "Dress"
elif class_prediction[0] == 4:
  product = "Coat"
elif class_prediction[0] == 5:
  product = "Sandal"
elif class_prediction[0] == 6:
  product = "Shirt"
elif class_prediction[0] == 7:
  product = "Sneaker"
elif class_prediction[0] == 8:
  product = "Bag"
else:
  product = "Ankle boot"

print(product)

uploaded = files.upload()
for i in uploaded.keys():

  path = '/content/'+i
  img = image.load_img(path,color_mode = "grayscale" ,target_size=(28,28))
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)

  images = np.vstack([x])
  class_prediction = model.predict(images, batch_size=128)
  print(class_prediction)

class_prediction = np.argmax(class_prediction, axis=1)

# class_prediction = model.predict_classes(img)
# print(class_prediction[0])

#Map apparel category with the numerical class
if class_prediction[0] == 0:
  product = "T-shirt/top"
elif class_prediction[0] == 1:
  product = "Trouser"
elif class_prediction[0] == 2:
  product = "Pullover"
elif class_prediction[0] == 3:
  product = "Dress"
elif class_prediction[0] == 4:
  product = "Coat"
elif class_prediction[0] == 5:
  product = "Sandal"
elif class_prediction[0] == 6:
  product = "Shirt"
elif class_prediction[0] == 7:
  product = "Sneaker"
elif class_prediction[0] == 8:
  product = "Bag"
else:
  product = "Ankle boot"
print(product)

model.save('fashion_item_prediction.h5')
# model = load_model('fashion_item_prediction_model.h5')

